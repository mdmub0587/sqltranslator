-- Schema creation
CREATE SCHEMA UNIVERSITY_DB;

-- Table: DEPARTMENTS
CREATE TABLE UNIVERSITY_DB.DEPARTMENTS (
    DEPT_ID SMALLINT GENERATED ALWAYS AS IDENTITY 
        (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    DEPT_NAME VARCHAR(100) NOT NULL UNIQUE,
    BUILDING CHAR(3) DEFAULT 'A01',
    ESTABLISHED_YEAR INTEGER CHECK (ESTABLISHED_YEAR >= 1900),
    DESCRIPTION CLOB
);

-- Table: PROFESSORS
CREATE TABLE UNIVERSITY_DB.PROFESSORS (
    PROF_ID INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PROF_NAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(150) UNIQUE NOT NULL,
    DOB DATE,
    HIRED_DATE TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    IS_TENURED BOOLEAN DEFAULT FALSE,
    DEPT_ID SMALLINT,
    BIOGRAPHY XML,
    FOREIGN KEY (DEPT_ID) REFERENCES UNIVERSITY_DB.DEPARTMENTS (DEPT_ID)
);

-- Table: STUDENTS
CREATE TABLE UNIVERSITY_DB.STUDENTS (
    STUDENT_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE,
    PHONE CHAR(10),
    DOB DATE,
    ENROLL_DATE DATE DEFAULT CURRENT DATE,
    GPA DECIMAL(3,2) CHECK (GPA BETWEEN 0.00 AND 4.00),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    DEPT_ID SMALLINT,
    FULL_NAME VARCHAR(101) GENERATED ALWAYS AS (FIRST_NAME || ' ' || LAST_NAME),
    FOREIGN KEY (DEPT_ID) REFERENCES UNIVERSITY_DB.DEPARTMENTS (DEPT_ID)
);

-- Table: COURSES
CREATE TABLE UNIVERSITY_DB.COURSES (
    COURSE_ID CHAR(6) PRIMARY KEY,
    COURSE_NAME VARCHAR(200) NOT NULL,
    CREDITS SMALLINT CHECK (CREDITS BETWEEN 1 AND 6),
    DEPT_ID SMALLINT NOT NULL,
    FOREIGN KEY (DEPT_ID) REFERENCES UNIVERSITY_DB.DEPARTMENTS (DEPT_ID)
);

-- Table: ENROLLMENTS
CREATE TABLE UNIVERSITY_DB.ENROLLMENTS (
    ENROLLMENT_ID BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    STUDENT_ID BIGINT NOT NULL,
    COURSE_ID CHAR(6) NOT NULL,
    ENROLL_DATE TIMESTAMP NOT NULL DEFAULT CURRENT TIMESTAMP,
    GRADE CHAR(2),
    CONSTRAINT UQ_ENROLL UNIQUE (STUDENT_ID, COURSE_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES UNIVERSITY_DB.STUDENTS (STUDENT_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES UNIVERSITY_DB.COURSES (COURSE_ID)
);

-- Table: FILES (to show LOBs and BLOB)
CREATE TABLE UNIVERSITY_DB.FILES (
    FILE_ID INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    FILE_NAME VARCHAR(255) NOT NULL,
    FILE_TYPE VARCHAR(50),
    FILE_SIZE BIGINT CHECK (FILE_SIZE >= 0),
    CONTENT BLOB(10M),
    UPLOAD_DATE TIMESTAMP DEFAULT CURRENT TIMESTAMP
);

-- Indexes
CREATE INDEX IDX_STUDENT_EMAIL ON UNIVERSITY_DB.STUDENTS (EMAIL);
CREATE INDEX IDX_COURSE_NAME ON UNIVERSITY_DB.COURSES (COURSE_NAME);

-- Sequence
CREATE SEQUENCE UNIVERSITY_DB.SEQ_TRANS_ID 
    START WITH 1000 INCREMENT BY 1 NO CYCLE CACHE 20;

-- Temporary Table
DECLARE GLOBAL TEMPORARY TABLE SESSION.TEMP_COURSE_STATS (
    DEPT_ID SMALLINT,
    TOTAL_COURSES INTEGER,
    AVERAGE_CREDITS DECIMAL(4,2)
) WITH REPLACE ON COMMIT PRESERVE ROWS;

-- Global Variable
CREATE VARIABLE UNIVERSITY_DB.CURRENT_TERM CHAR(6) DEFAULT '2025S1';

-- View (optional)
CREATE VIEW UNIVERSITY_DB.STUDENT_VIEW AS
SELECT STUDENT_ID, FULL_NAME, EMAIL, GPA
FROM UNIVERSITY_DB.STUDENTS
WHERE IS_ACTIVE = TRUE;
